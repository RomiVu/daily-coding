#!python 3.6.5
#Aug 18, 2018
'''
Given an array of numbers, find the maximum sum of any contiguous subarray of the array.

For example, given the array [34, -50, 42, 14, -5, 86], the maximum sum would be 137, 
since we would take elements 42, 14, -5, and 86.

Given the array [-5, -1, -8, -9], the maximum sum would be 0, since we would not take any elements.

Do this in O(N) time.
'''

def find_max(given_list):
    max_sum = 0
    indicator = 0
    for i in range(len(given_list)):
        max_sum += given_list[i]
        if max_sum < 0:
            max_sum = 0
        elif max_sum > indicator:
            indicator = max_sum
    return indicator


print(find_max([34, -50, 42, 14, -5, 86]))  # 137
print(find_max([-34, -50, -42, -14, -5, -86]))  # 0
print(find_max([1, -4, 1, 1, -5, 1]))  # 2

# This problem can be simplified: given the array, and given the specific length 
# of the subarray, find the maximum sum of any contiguous subarray of the array.
# For example, given the list [1, -4, 1, 6, -5, 1], find the subarray which length is 3
# result would be 3, the sum of [-4, 1, 6].

def find_max(given_list, given_length):
    max_sum = 0
    for i in range(len(given_list) - given_length):
        if sum(given_list[i:i + given_length]) > max_sum:
            max_sum = sum(given_list[i:i + given_length])
    return max_sum
